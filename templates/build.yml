#  devops template to build and publish the application
parameters:
  buildConfiguration: 'Release'

# builds the project, using configuration mode, defined by $(buildConfiguration) var
steps:
- task: DotNetCoreCLI@2
  displayName: 'Build the project - dotnet build for ${{ parameters.buildConfiguration }}'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration ${{ parameters.buildConfiguration }}'
    projects: '**/*.csproj'

# installs ReportGenerator, which provides a number of formats, including HTML. The HTML formats 
# create detailed reports for each class in a .NET project.    
- task: DotNetCoreCLI@2
  displayName: 'Install code coverage ReportGenerator (converts results to a format that's human-readable)'
  inputs:
    command: custom
    custom: tool
    arguments: 'install --global dotnet-reportgenerator-globaltool'

# runs unit tests and collects code coverage data, using Cobetura - tool that 
# calculates the percentage of code accessed by tests
- task: DotNetCoreCLI@2
  displayName: 'Run unit tests and code coverage tool- $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*.Tests.csproj'

# Creates code coverage report & converts Cobertura output to HTML
- script: |
    reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines_Dark
  displayName: 'Create code coverage report'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml' 

# publish the application's build results (including its dependencies) into a folder. 
# The zipAfterPublish argument specifies to add the built results to a .zip file
- task: DotNetCoreCLI@2
  displayName: 'Publish the project - ${{ parameters.buildConfiguration }}'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)/${{ parameters.BuildConfiguration }}'
    zipAfterPublish: true